# .bash_prompt
#
# Copyright (c) 2018 Mark Jeromin
# Licensed under the MIT License

#############################
# ANSI color escape sequences
#############################

     declare -A font_colors=()
       font_colors['black']="\[\033[0;30m\]"
         font_colors['red']="\[\033[0;31m\]"
       font_colors['green']="\[\033[0;32m\]"
      font_colors['yellow']="\[\033[0;33m\]"
        font_colors['blue']="\[\033[0;34m\]"
     font_colors['magenta']="\[\033[0;35m\]"
        font_colors['cyan']="\[\033[0;36m\]"
       font_colors['white']="\[\033[0;37m\]"
        font_colors['none']="\[\033[0m\]"
       font_colors['blink']="\[\033[5m\]"
  font_colors['bold_black']="\[\033[1;30m\]"
    font_colors['bold_red']="\[\033[1;31m\]"
  font_colors['bold_green']="\[\033[1;32m\]"
 font_colors['bold_yellow']="\[\033[1;33m\]"
   font_colors['bold_blue']="\[\033[1;34m\]"
font_colors['bold_magenta']="\[\033[1;35m\]"
   font_colors['bold_cyan']="\[\033[1;36m\]"
  font_colors['bold_white']="\[\033[1;37m\]"
    font_colors['bg_black']="\[\033[40m\]"
      font_colors['bg_red']="\[\033[41m\]"
    font_colors['bg_green']="\[\033[42m\]"
   font_colors['bg_yellow']="\[\033[43m\]"
     font_colors['bg_blue']="\[\033[44m\]"
  font_colors['bg_magenta']="\[\033[45m\]"
     font_colors['bg_cyan']="\[\033[46m\]"
    font_colors['bg_white']="\[\033[47m\]"

# If your terminal supports it, this function will print out the ANSI
# escape sequence to set the title bar.
titlebar() {
    case $TERM in
        xterm*|rxvt*)
            echo '\[\033]0;\u@\h:\w\007\]'
            ;;
        *)
            echo
            ;;
    esac
    return 0
}

# This function (really just "inline python" via bash heredoc) truncates pwd to under 25 characters and prints to STDOUT.
pwdtrunc() {
python - <<END
from os import path,getcwd
homedir = path.expanduser('~')
pwd = getcwd()
# $HOME abbreviated with a tilde
pwd = pwd.replace(homedir, '~', 1)
if len(pwd) >= 25:
    pwd = pwd[:10]+'..'+pwd[-13:]
print("{}".format(pwd))
END
    return 0
}

# This function picks a random emoji and prints it to STDOUT.
randomoji() {
    local my_emoji_array=(üê∂ üê± üê≠ üêπ üê∞ ü¶ä üêª üêº üê® üêØ ü¶Å üêÆ üê∑ üêΩ üê∏ üêµ üôà üôâ üôä üêí üêî üêß üê¶ üê§ üê£ üê• ü¶Ü ü¶Ö ü¶â ü¶á üê∫ üêó üê¥ ü¶Ñ üêù üêõ ü¶ã üêå üêö üêû üêú ü¶ó ü¶Ç üê¢ üêç ü¶é ü¶ñ ü¶ï üêô ü¶ë ü¶ê ü¶Ä üê° üê† üêü üê¨ üê≥ üêã ü¶à üêä üêÖ üêÜ ü¶ì ü¶ç üêò ü¶è üê™ üê´ ü¶í üêÉ üêÇ üêÑ üêé üêñ üêè üêë üêê ü¶å üêï üê© üêà üêì ü¶É üêá üêÅ üêÄ ü¶î üêâ üê≤ ü§° üòà üëø üëπ üë∫ üíÄ üëª üëΩ ü§ñ üí© üé© ‚òïÔ∏è üç∫ üçï üç≥ ü•û üóø üöÄ üõ∏ ‚öìÔ∏è üåã üåá üåÜ üèô üåÉ üåå üåâ üî´ üí£ üî• üîß üî® üí∞ ‚è∞ üíØ ‚ôªÔ∏è  üèÅ üö© ü¶ù ü¶° ü¶ú ü¶û)
    local COUNT=$(printf '%s\n' "${my_emoji_array[@]}" | wc -l)
    echo ${my_emoji_array[$RANDOM % $COUNT]}
    return 0
}

# This function prints emoji based on the exit status (ie. from the previous command).
# We can probably create more exit code classifications and associated emoji, at least 255 if we're feeling ambitious.
eximoji() {
    local exit_code0_emoji_array=(üòÄ üòÅ üòÇ ü§£ üòÉ üòÑ üòÖ üòÜ üòâ üòä üòã üòé üòå üòõ üòú üòù ü§™ üò∑ ü§ì)
    local exit_code1_emoji_array=(ü§î ü§® üòê üòë üò∂ üôÑ üòè üò£ üò• üòÆ ü§ê üòØ üò™ üò´ üò¥ ü§§ üòí üòì üòî üòï üò≤ ‚òπÔ∏è  üôÅ üòñ üòû üòü üò§ üò¢ üò≠ üò¶ üòß üò® üò© ü§Ø üò¨ üò∞ üò± üò≥ üòµ üò° üò† ü§¨ ü§í ü§ï ü§¢ ü§Æ ü§ß ü§• ü§´ ü•µ ü•∂ ü•¥ ü•∫)
    if [[ $1 == 0 ]]; then
        local my_emoji_array=("${exit_code0_emoji_array[@]}")
    else
        local my_emoji_array=("${exit_code1_emoji_array[@]}")
    fi
    local COUNT=$(printf '%s\n' "${my_emoji_array[@]}" | wc -l)
    echo ${my_emoji_array[$RANDOM % $COUNT]}
    return 0
}

# This function checks for new mail. It prints one of the mailbox emoji depending on mail status.
# If it cannot perform this check, it will print a wrench. If there is no mailbox, it prints nothing.
mailmoji() {
    # if $MAIL is not set, default to the /var/spool path
    local MAILBOX=${MAIL:-/var/spool/mail/$USER}
    if [[ -r "$MAILBOX" ]]; then
        # check if the access time is earlier than the modification time
        eval $(stat -c 'atime=%X; mtime=%Y' $MAILBOX)
        [[ $atime -le $mtime ]] &&
            echo üì¨ || # you've got mail!
            echo üì™    # sorry no mail
    elif [[ -e "$MAILBOX" ]]; then
        # something appears to be broken
        echo üîß
    else
        : # noop, do nothing
    fi
    return 0
}

# This function will print a blinkable alarm clock if environment variable $ALARMCLOCK is set to a 24-hour time HH:MM.
# Otherwise, it prints nothing.
alarmoji() {
    # first check time format
    if [[ -n "$ALARMCLOCK" ]] && [[ ! $ALARMCLOCK =~ ([01][0-9]|2[0-3]):[0-5][0-9] ]]; then
        # invalid format 
        echo üîß
    elif [[ -n "$ALARMCLOCK" ]]; then
        local ALARMSECONDS=$(date --date="$ALARMCLOCK" +%s)
        local NOWSECONDS=$(date +%s)
        [[ $NOWSECONDS -gt $ALARMSECONDS ]] &&
            echo -e "${font_colors['blink']}‚è∞${font_colors['none']}" || # blink the clock
            echo ‚è∞                                                      # just print the clock
    else
        : # noop, do nothing
    fi
    return 0
}

# This function will print the git branch we are under, if applicable.
# Otherwise, it will print the Scandinavian vowel √ò.
show_git_branch() {
    local REF=$(git symbolic-ref HEAD 2> /dev/null)
    local BRANCH=$(basename $REF 2> /dev/null)
    [ -n "$BRANCH" ] && echo "Œ≤ $BRANCH" || echo "√ò"
    return 0
}

# This function will print the number of git commits our branch is ahead/behind, if applicable.
# Otherwise, it will print nothing.
show_git_commit_plusminus() {
    local AHEAD_REGEX="Your branch is ahead of .* by ([0-9]+) commits"
    local BEHIND_REGEX="Your branch is behind .* by ([0-9]+) commits"
    local STATUS=$(git status | grep -E 'Your branch' 2> /dev/null)
    if [[ -n "$STATUS" ]] && [[ $STATUS =~ $AHEAD_REGEX ]]; then
        echo "+${BASH_REMATCH[1]}"
    elif [[ -n "$STATUS" ]] && [[ $STATUS =~ $BEHIND_REGEX ]]; then
        echo "-${BASH_REMATCH[1]}"
    else
        : # noop, do nothing
    fi
    return 0
}

# this function will print a count of git stashes, if applicable.
# Otherwise, it will print nothing.
show_git_stashes() {
    local STASH_COUNT=$(git stash list 2> /dev/null | wc -l)
    [ $STASH_COUNT -gt 0 ] && echo "Œî$STASH_COUNT"
    return 0
}

# Our prompt_command() ties together the functions above to assemble a dynamic prompt every time PS1 is loaded.
# We take advantage of a few PS1 "macros":
# * \u: username of the current user
# * \h: short hostname (up to the first '.'
# * \t: the current time in 24-hour HH:MM:SS format
prompt_command() {
    # this statement *must* come first
    local last_exit_result=$?
    local pwd=$(pwdtrunc)
    local alert_tray="${font_colors['bold_green']}($(eximoji $last_exit_result)$(mailmoji)$(alarmoji)${font_colors['bold_green']})"
    local user_tray="${font_colors['bold_green']}(${prompt_color}\u@\h:${pwd}${font_colors['bold_green']})"
    local time_tray="${font_colors['bold_green']}(${prompt_color}\t${font_colors['bold_green']})"

    # there's some logic, but it makes the git tray look nicer
    local git_tray="${EMG}(${prompt_color}$(show_git_branch)"
    if [[ "$(show_git_branch)" == "√ò" ]]; then
        git_tray="${git_tray}${font_colors['bold_green']})"
    else
        [[ -n "$(show_git_commit_plusminus)" ]] &&
            git_tray="${git_tray} $(show_git_commit_plusminus)"
        [[ -n "$(show_git_stashes)" ]] &&
            git_tray="${git_tray} $(show_git_stashes)"
        git_tray="${git_tray}${EMG})"
    fi
    export PS1="$(titlebar)${alert_tray}-${user_tray}-${time_tray}-${git_tray}${prompt_tail}"
    return 0
}

# these are definitions will stay the same on every $PS1
if [ $UID -eq "0" ]; then
    prompt_tail="üöß‚ò†Ô∏è ${font_colors['bold_white']}  "
    prompt_color="${font_colors['red']}"
else
    prompt_tail="$(randomoji)${font_colors['bold_white']}  "
    prompt_color="${font_colors['green']}"
fi

PROMPT_COMMAND=prompt_command
